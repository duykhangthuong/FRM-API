// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using kroniiapi.DB;

namespace kroniiapi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.Entity("kroniiapi.DB.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("AdminId");

                    b.HasIndex("RoleId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("AvatarURL")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("AdministratorId");

                    b.HasIndex("RoleId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationURL")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicationId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ApplicationCategoryId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.ApplicationCategory", b =>
                {
                    b.Property<int>("ApplicationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("SampleFileURL")
                        .HasColumnType("text");

                    b.HasKey("ApplicationCategoryId");

                    b.ToTable("ApplicationCategories");

                    b.HasData(
                        new
                        {
                            ApplicationCategoryId = 1,
                            CategoryName = "Đơn đề nghị thôi học",
                            SampleFileURL = "https://mega.nz/file/FZwxVYDY#osv1wM3x-JQ6jilW4zOO65eZA0_xFuiUqCey2G3Uprw"
                        },
                        new
                        {
                            ApplicationCategoryId = 2,
                            CategoryName = "Đơn chuyển cơ sở",
                            SampleFileURL = "https://mega.nz/file/ZNpRTArA#y3JkAukljPtNsvINoub99zs6PEydE-OUIyqDyRLSx6I"
                        },
                        new
                        {
                            ApplicationCategoryId = 3,
                            CategoryName = "Đơn chuyển ngành học",
                            SampleFileURL = "https://mega.nz/file/AIw1EIab#wjMq0nv4p2LyVebEbLcKXII4uXyF0xtaUXyBN2yUyU0"
                        },
                        new
                        {
                            ApplicationCategoryId = 4,
                            CategoryName = "Đơn bảo lưu học phần",
                            SampleFileURL = "https://mega.nz/file/cVoBGC4R#1pgTUuPfGvk1abJZMb_MUsZ4d_3UgBqKOMNDVlm2Auo"
                        },
                        new
                        {
                            ApplicationCategoryId = 5,
                            CategoryName = "Đơn đăng ký thi cải thiện điểm",
                            SampleFileURL = "https://mega.nz/file/lcxBGSLK#zl6kU7vF9dHvk203H1sv4gb-SjRe5EHyATFqRZF9XjI"
                        },
                        new
                        {
                            ApplicationCategoryId = 6,
                            CategoryName = "Đơn xác nhận thực tập",
                            SampleFileURL = "https://mega.nz/file/FZoRjYiZ#kcbdQ0Mb4jzhNSXLP0jQGaJZgtSmJ3SIy0QD2ddpi4Q"
                        },
                        new
                        {
                            ApplicationCategoryId = 7,
                            CategoryName = "Đơn khiếu nại điểm danh",
                            SampleFileURL = "https://mega.nz/file/tRphHCCJ#3kqNCGZT9XNzDNAe4WDYI2tOMqw_WI7sGR-cdGKHsz0"
                        });
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.HasKey("AttendanceId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.BonusAndPunish", b =>
                {
                    b.Property<int>("BonusAndPunishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.HasKey("BonusAndPunishId");

                    b.HasIndex("TraineeId");

                    b.ToTable("BonusAndPunishes");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Calendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("SyllabusSlot")
                        .HasColumnType("integer");

                    b.HasKey("CalendarId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Certificate", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.Property<string>("CertificateURL")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ModuleId", "TraineeId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ClassId");

                    b.HasIndex("AdminId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.ClassModule", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<float>("WeightNumber")
                        .HasColumnType("real");

                    b.HasKey("ClassId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TrainerId");

                    b.ToTable("ClassModules");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.CompanyRequest", b =>
                {
                    b.Property<int>("CompanyRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReportURL")
                        .HasColumnType("text");

                    b.HasKey("CompanyRequestId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyRequests");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.CompanyRequestDetail", b =>
                {
                    b.Property<int>("CompanyRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Wage")
                        .HasColumnType("money");

                    b.HasKey("CompanyRequestId", "TraineeId");

                    b.HasIndex("TraineeId");

                    b.ToTable("CompanyRequestDetails");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Cost", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("CostTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CostId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CostTypeId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.CostType", b =>
                {
                    b.Property<int>("CostTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CostTypeName")
                        .HasColumnType("text");

                    b.HasKey("CostTypeId");

                    b.ToTable("CostTypes");

                    b.HasData(
                        new
                        {
                            CostTypeId = 1,
                            CostTypeName = "Cơ sở vật chất"
                        },
                        new
                        {
                            CostTypeId = 2,
                            CostTypeName = "Tổ chức Event"
                        });
                });

            modelBuilder.Entity("kroniiapi.DB.Models.DeleteClassRequest", b =>
                {
                    b.Property<int>("DeleteClassRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("DeleteClassRequestId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClassId");

                    b.ToTable("DeleteClassRequests");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CancalledAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DurationInMinute")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExamDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExamName")
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.HasKey("ExamId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdminSupport")
                        .HasColumnType("integer");

                    b.Property<int>("ApproriateTopicLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InformationToTrainees")
                        .HasColumnType("integer");

                    b.Property<int>("InstructionAndCommunicate")
                        .HasColumnType("integer");

                    b.Property<int>("Logistics")
                        .HasColumnType("integer");

                    b.Property<string>("OtherComment")
                        .HasColumnType("text");

                    b.Property<int>("SubjectCoverage")
                        .HasColumnType("integer");

                    b.Property<int>("TopicContent")
                        .HasColumnType("integer");

                    b.Property<int>("TopicObjective")
                        .HasColumnType("integer");

                    b.Property<int>("TopicUsefulness")
                        .HasColumnType("integer");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainerKnowledge")
                        .HasColumnType("integer");

                    b.Property<int>("TrainerSupport")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingMaterial")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Mark", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("ModuleId", "TraineeId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IconURL")
                        .HasColumnType("text");

                    b.Property<float>("MaxScore")
                        .HasColumnType("real");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<int>("NoOfSlot")
                        .HasColumnType("integer");

                    b.Property<float>("PassingScore")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("SlotDuration")
                        .HasColumnType("interval");

                    b.Property<string>("SyllabusURL")
                        .HasColumnType("text");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Trainer"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Trainee"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Company"
                        });
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            RoomName = "G101"
                        },
                        new
                        {
                            RoomId = 2,
                            RoomName = "G102"
                        },
                        new
                        {
                            RoomId = 3,
                            RoomName = "G103"
                        },
                        new
                        {
                            RoomId = 4,
                            RoomName = "G104"
                        },
                        new
                        {
                            RoomId = 5,
                            RoomName = "G105"
                        },
                        new
                        {
                            RoomId = 6,
                            RoomName = "B101"
                        },
                        new
                        {
                            RoomId = 7,
                            RoomName = "B102"
                        },
                        new
                        {
                            RoomId = 8,
                            RoomName = "B103"
                        },
                        new
                        {
                            RoomId = 9,
                            RoomName = "B104"
                        },
                        new
                        {
                            RoomId = 10,
                            RoomName = "B105"
                        });
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Trainee", b =>
                {
                    b.Property<int>("TraineeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("text");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("OnBoard")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<decimal>("Wage")
                        .HasColumnType("money");

                    b.HasKey("TraineeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoleId");

                    b.ToTable("Trainees");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.TraineeExam", b =>
                {
                    b.Property<int>("TraineeId")
                        .HasColumnType("integer");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.HasKey("TraineeId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("TraineeExams");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("TrainerId");

                    b.HasIndex("RoleId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Admin", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Administrator", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Role", "Role")
                        .WithMany("Administrators")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Application", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Admin", "Admin")
                        .WithMany("Applications")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kroniiapi.DB.Models.ApplicationCategory", "ApplicationCategory")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Trainee", "Trainee")
                        .WithMany("Applications")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("ApplicationCategory");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Attendance", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Trainee", "Trainee")
                        .WithMany("Attendances")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.BonusAndPunish", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Trainee", "Trainee")
                        .WithMany("BonusAndPunishes")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Calendar", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Class", "Class")
                        .WithMany("Calendars")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Module", "Module")
                        .WithMany("Calendars")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Certificate", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Module", "Module")
                        .WithMany("Certificates")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Trainee", "Trainee")
                        .WithMany("Certificates")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Class", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Admin", "Admin")
                        .WithMany("Classes")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.ClassModule", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Class", "Class")
                        .WithMany("ClassModules")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Module", "Module")
                        .WithMany("ClassModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Room", "Room")
                        .WithMany("ClassModules")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Trainer", "Trainer")
                        .WithMany("ClassModules")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Module");

                    b.Navigation("Room");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Company", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Role", "Role")
                        .WithMany("Companies")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.CompanyRequest", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Company", "Company")
                        .WithMany("CompanyRequests")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.CompanyRequestDetail", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.CompanyRequest", "CompanyRequest")
                        .WithMany("CompanyRequestDetails")
                        .HasForeignKey("CompanyRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Trainee", "Trainee")
                        .WithMany("CompanyRequestDetails")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyRequest");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Cost", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Admin", "Admin")
                        .WithMany("Costs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.CostType", "CostType")
                        .WithMany("Costs")
                        .HasForeignKey("CostTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("CostType");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.DeleteClassRequest", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Admin", "Admin")
                        .WithMany("DeleteClassRequests")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Class", "Class")
                        .WithMany("DeleteClassRequests")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Exam", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Admin", "Admin")
                        .WithMany("Exams")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Module", "Module")
                        .WithMany("Exams")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Feedback", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Trainee", "Trainee")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Mark", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Module", "Module")
                        .WithMany("Marks")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Trainee", "Trainee")
                        .WithMany("Marks")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Trainee", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Class", "Class")
                        .WithMany("Trainees")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("kroniiapi.DB.Models.Role", "Role")
                        .WithMany("Trainees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.TraineeExam", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Exam", "Exam")
                        .WithMany("TraineeExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kroniiapi.DB.Models.Trainee", "Trainee")
                        .WithMany("TraineeExams")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Trainer", b =>
                {
                    b.HasOne("kroniiapi.DB.Models.Role", "Role")
                        .WithMany("Trainers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Admin", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Classes");

                    b.Navigation("Costs");

                    b.Navigation("DeleteClassRequests");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.ApplicationCategory", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Class", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("ClassModules");

                    b.Navigation("DeleteClassRequests");

                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Company", b =>
                {
                    b.Navigation("CompanyRequests");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.CompanyRequest", b =>
                {
                    b.Navigation("CompanyRequestDetails");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.CostType", b =>
                {
                    b.Navigation("Costs");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Exam", b =>
                {
                    b.Navigation("TraineeExams");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Module", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Certificates");

                    b.Navigation("ClassModules");

                    b.Navigation("Exams");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Role", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("Admins");

                    b.Navigation("Companies");

                    b.Navigation("Trainees");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Room", b =>
                {
                    b.Navigation("ClassModules");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Trainee", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Attendances");

                    b.Navigation("BonusAndPunishes");

                    b.Navigation("Certificates");

                    b.Navigation("CompanyRequestDetails");

                    b.Navigation("Feedbacks");

                    b.Navigation("Marks");

                    b.Navigation("TraineeExams");
                });

            modelBuilder.Entity("kroniiapi.DB.Models.Trainer", b =>
                {
                    b.Navigation("ClassModules");
                });
#pragma warning restore 612, 618
        }
    }
}
